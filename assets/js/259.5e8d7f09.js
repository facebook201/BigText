(window.webpackJsonp=window.webpackJsonp||[]).push([[259],{934:function(a,s,t){"use strict";t.r(s);var e=t(30),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"_1、什么是docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是docker"}},[a._v("#")]),a._v(" 1、什么是docker？")]),a._v(" "),s("p",[a._v("​\t\tdocker是一个能够将开发的应用程序部署到容器的"),s("code",[a._v("开源引擎")]),a._v("。docker在虚拟化的容器执行环境中，增加了一个"),s("code",[a._v("应用程序部署引擎")]),a._v("。该引擎的目标就是提供一个轻量、快速的环境，能够运行开发者的程序，并方便高效的将程序从开发者的笔记本部署到测试环境，然后再部署到开发环境。")]),a._v(" "),s("h3",{attrs:{id:"_2、docker组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、docker组件"}},[a._v("#")]),a._v(" 2、Docker组件")]),a._v(" "),s("ul",[s("li",[a._v("Docker客户端和服务器")]),a._v(" "),s("li",[a._v("Docker镜像")]),a._v(" "),s("li",[a._v("Registry")]),a._v(" "),s("li",[a._v("Docker容器")])]),a._v(" "),s("p",[s("strong",[a._v("1、Docker客户端和服务器")])]),a._v(" "),s("p",[a._v("​\t\t"),s("code",[a._v("Docker")]),a._v("是一个客户-服务器（C/S）架构的程序。Docker客户端只需向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有工作并返回结果。")]),a._v(" "),s("p",[s("strong",[a._v("2、Docker镜像")])]),a._v(" "),s("p",[a._v("​\t\t镜像是构建Docker世界的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式的结构，由一系列指令一步一步构建出来。")]),a._v(" "),s("p",[a._v("​\t\t也可以把镜像当做容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。")]),a._v(" "),s("p",[s("strong",[a._v("3、Registry")])]),a._v(" "),s("p",[a._v("​\t\tDocker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。")]),a._v(" "),s("p",[s("strong",[a._v("4、容器")])]),a._v(" "),s("p",[a._v("​\t\t容器是基于镜像启动起来的，容器中可以运行一个或多个进程。镜像是Docker生命周期中的构建或打包阶段，而容器则是启动或执行阶段。")]),a._v(" "),s("p",[a._v("总的来说，Docker容器就是"),s("code",[a._v("一个镜像格式、一系列标准的操作、一个执行环境。")])]),a._v(" "),s("h3",{attrs:{id:"_3、docker能够用来做什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、docker能够用来做什么"}},[a._v("#")]),a._v(" 3、docker能够用来做什么？")]),a._v(" "),s("ul",[s("li",[a._v("加速本地开发和构建流程，使其更加高效、更加轻量化。本地开发人员可以构建、运行并分享Docker容器。容器可以在开发环境中构建，然后轻松的提交到测试环境中，并最终进入生产环境。")]),a._v(" "),s("li",[a._v("能够让独立服务或应用程序在不同的环境中，得到相同的运行结果。")]),a._v(" "),s("li",[a._v("用docker创建隔离的环境来进行测试。")]),a._v(" "),s("li",[a._v("docker可以让开发者先于本机是哪个构建一个复杂的程序或者架构来进行测试，而不是一开始就在生产环境部署、测试。")]),a._v(" "),s("li",[a._v("构建一个多用户的平台即服务的（Paas）基础设施。")]),a._v(" "),s("li",[a._v("为开发、测试提供一个轻量级的独立沙盒环境，或者将独立的沙盒环境用于技术教学。")]),a._v(" "),s("li",[a._v("提供软件及服务（SaaS）应用程序。")]),a._v(" "),s("li",[a._v("高性能、超大规模的宿主机部署。")])]),a._v(" "),s("h3",{attrs:{id:"_4、docker命令详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、docker命令详解"}},[a._v("#")]),a._v(" 4、docker命令详解")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("strong",[a._v("容器生命周期管理命令")])]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("docker run")]),a._v(" 该命令用于创建容器。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" IMAGE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("COMMAND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ARG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("options说明")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n-d 后台运行容器，并返回容器ID。\n-i 以交互模式运行容器，通常与-t同时使用。\n-P 随机端口映射，容器内部端口随机映射到主机的高端口\n-p 指定端口映射，格式为："主机(宿主)端口：容器端口"\n-t 为容器重新分配一个伪输入终端，通常与-i同时使用。\n--name="nginx-lb" 为容器指定一个名称\n--dns 8.8.8.8 指定容器使用的DNS服务器，默认和宿主一致。\n--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；\n-h "mars": 指定容器的hostname；\n-e username="ritchie": 设置环境变量；\n--env-file=[]: 从指定文件读入环境变量；\n--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；\n-m :设置容器使用内存最大值；\n--net="bridge": 指定容器的网络连接类型，支持bridge/host/none/container: 四种类型；\n--link=[]: 添加链接到另一个容器；\n-expose=[]: 开放一个端口或一组端口；\n--volume , -v:\t绑定一个卷\n')])])]),s("p",[s("strong",[a._v("例子")])]),a._v(" "),s("p",[a._v("1、使用docker镜像nginx:latest以"),s("code",[a._v("后台模式")]),a._v("启动一个容器,并将容器命名为mynginx。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" mynginx "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" nginx:latest\n")])])]),s("p",[a._v("2、使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-P")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" nginx:latest\n")])])]),s("p",[a._v("3、使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":80 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" /data:/data "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" nginx:latest\n")])])]),s("p",[a._v("4、绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:80:8080/tcp ubuntu "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),s("p",[a._v("5、使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" nginx:latest /bin/bash\n")])])]),s("p",[a._v("6、创建了一个 python 应用的容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-P")]),a._v(" training/webapp python app.py \n//python app.py是命令行，training/webapp是镜像，-P用来做容器内部端口随机映射到主机端口。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5000")]),a._v(":5000 training/webapp python app.py\n//也可以使用-p来绑定端口\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:5001:5000 training/webapp python app.py\n//可以指定容器绑定的网络地址，比如绑定 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("127.0")]),a._v(".0.1:5000:5000/udp training/webapp python app.py\n//默认都是绑定tcp端口，也可以绑定UDP端口。\n")])])]),s("ul",[s("li",[s("p",[s("strong",[a._v("docker start/stop/restart 启动、停止、重启容器")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CONTAINER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CONTAINER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" restart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CONTAINER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])])]),a._v(" "),s("p",[s("strong",[a._v("例子")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("//启动被停止的helloworld\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" start helloworld\n//停止运行中的helloworld\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" stop helloworld\n//重启容器helloworld\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" restart helloworld\n")])])]),s("ul",[s("li",[s("p",[s("strong",[a._v("docker kill  杀掉一个运行中的容器")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" KILL helloworld //-s 向容器发送一个信号\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" //杀死所有正在运行的容器\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker rm 删除一个或多个容器")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("CONTAINER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明：")]),a._v(" "),s("ul",[s("li",[a._v("-f ：通过SIGKILL信号强制删除一个运行中的容器。")]),a._v(" "),s("li",[a._v("-l：移除容器间的网络连接，而非容器本身。")]),a._v(" "),s("li",[a._v("-v：删除与容器关联的卷。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" hello1 hello2 //强制删除容器hello1、hello2\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-l")]),a._v(" db //移除连接名为db的两个容器间的连接\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" hello //删除容器hello,并删除容器挂载的数据卷\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" //删除所有已经停止的容器\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker pause/unpause 暂停/恢复容器中所有的进程")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pause hello\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" unpause hello\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker create 创建一个新的容器但是不启动它")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" create "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" IMAGE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("COMMAND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("ARG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" //语法同docker run\n//使用docker镜像nginx:latest创建一个名为hello的容器\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" create "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" hello nginx:latest\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker exec：在运行的容器中执行命令,并且命令退出容器终端，不会导致容器的停止。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER COMMAND \n")])])]),s("p",[a._v("OPTIONS说明")]),a._v(" "),s("ul",[s("li",[a._v("-d：分离模式，在后台运行。")]),a._v(" "),s("li",[a._v("-i：即使没有附加也保持STDIN打开。")]),a._v(" "),s("li",[a._v("-t：分配一个伪终端。")])]),a._v(" "),s("p",[s("strong",[a._v("实例")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" hello /bin/sh /root/hello.sh \n//在容器hello中以交互模式执行容器里的/root/hello.sh脚本\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" hello /bin/bash\n//在容器hello中开启一个交互模式的终端\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v("\n//查看在运行的容器，然后可以使用id进入容器\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" 92de231ws32 /bin/bash\n")])])]),s("p",[s("strong",[a._v("容器操作命令")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker ps：列出容器")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明")]),a._v(" "),s("ul",[s("li",[a._v("-a：显示所有的容器，包括未运行的。")]),a._v(" "),s("li",[a._v("-f：根据条件过滤显示的内容。")]),a._v(" "),s("li",[a._v("--format：指定返回值的模板文件。")]),a._v(" "),s("li",[a._v("-l：显示最近创建的容器。")]),a._v(" "),s("li",[a._v("-n：列出最近创建的几个容器。")]),a._v(" "),s("li",[a._v("--no-trunc：不截断输出。")]),a._v(" "),s("li",[a._v("-q：静默模式，只显示容器编号。")]),a._v(" "),s("li",[a._v("-s：显示总的文件大小。")])]),a._v(" "),s("p",[a._v("ps命令的输出详情介绍：")]),a._v(" "),s("p",[s("strong",[a._v("CONTAINER ID：容器ID")])]),a._v(" "),s("p",[s("strong",[a._v("IMAGE：使用的镜像。")])]),a._v(" "),s("p",[s("strong",[a._v("COMMAND：启动容器时运行的命令。")])]),a._v(" "),s("p",[s("strong",[a._v("CREARED：容器的创建时间。")])]),a._v(" "),s("p",[s("strong",[a._v("STATUS：容器状态。")])]),a._v(" "),s("p",[a._v("状态有7种。")]),a._v(" "),s("ul",[s("li",[a._v("created(已创建)")]),a._v(" "),s("li",[a._v("restarting(重起中)")]),a._v(" "),s("li",[a._v("running(运行中)")]),a._v(" "),s("li",[a._v("removing(迁移中)")]),a._v(" "),s("li",[a._v("paused(暂停)")]),a._v(" "),s("li",[a._v("exited(停止)")]),a._v(" "),s("li",[a._v("dead(死亡)")])]),a._v(" "),s("p",[s("strong",[a._v("PORTS：容器的端口信息合使用的连接类型（tcp/udp）")])]),a._v(" "),s("p",[s("strong",[a._v("NAMES：自动分配的容器名称。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker inspect：获取镜像/容器的元数据")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker attach: 连接到正在运行中的容器")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" attach hello //hello是镜像名称\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker events：从服务器获取实时事件。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" events "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明：")]),a._v(" "),s("ul",[s("li",[a._v("-f：根据条件过滤事件。")]),a._v(" "),s("li",[a._v("--since：从指定的时间戳后显示所有事件。")]),a._v(" "),s("li",[a._v("--until：流水时间显示到指定的时间为止。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" events "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--since")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"146700000"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" events "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"image"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--since")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"146700000"')]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker logs：获取容器的日志。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER\n")])])]),s("p",[a._v("OPTIONS说明:")]),a._v(" "),s("ul",[s("li",[a._v("-f：跟踪日志输出。")]),a._v(" "),s("li",[a._v("--since：显示某个开始时间的所有日志。")]),a._v(" "),s("li",[a._v("-t：显示时间戳。")]),a._v(" "),s("li",[a._v("--tail：仅列出最新N条容器日志。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" logs "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--since")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2020-02-17"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--tail")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" hello\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker export：将文件系统作为一个tar归档文件导出到STDOUT。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" hello-"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("date-%y%m%d"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(".tar hello //将hello容器按日期保存为tar文件。\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker port：列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker commit：从容器创建一个新的镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("REPOSITORY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":TAG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明：")]),a._v(" "),s("ul",[s("li",[a._v("-a：提交的镜像作者。")]),a._v(" "),s("li",[a._v("-c：使用dockerfile指令来创建镜像。")]),a._v(" "),s("li",[a._v("-m：提交时的说明文字。")]),a._v(" "),s("li",[a._v("-p：在commit时，将容器暂停。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("//将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\n "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"james"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"test"')]),a._v(" hello  mymysql:v1 \n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker cp：用于容器和主机之间的数据拷贝。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" CONTAINER:SRC_PATH DEST_PATH"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\tSRC_PATH"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("- CONTAINER:DEST_PATH\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker login/logout：登录到/登出docker镜像仓库，默认为docker hub")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" login "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" 用户名 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" 密码\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("logout")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker pull：从镜像仓库中拉取或者更新指定仓库。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" NAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":TAG"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("@DIGEST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明：")]),a._v(" "),s("ul",[s("li",[a._v("-a：拉取所有的tagged镜像")]),a._v(" "),s("li",[a._v("--disable-content-trust：忽略镜像的校验，默认开启。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" pull "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" ubuntu\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker push：将本地的镜像上传到镜像仓库，要先登录到镜像仓库。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker search：从docker hub上查找镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" search "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("TERM")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明:")]),a._v(" "),s("ul",[s("li",[a._v("--automated：只列出automated build类型的镜像。")]),a._v(" "),s("li",[a._v("--no-trunc：显示完整的镜像描述。")]),a._v(" "),s("li",[a._v("-s：列出收藏数不小于指定值的镜像。")])])])]),a._v(" "),s("p",[s("strong",[a._v("本地镜像管理")])]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("docker images：列出本地镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("REPOSITOPY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":TAG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明:")]),a._v(" "),s("ul",[s("li",[a._v("-a：列出本地所有的镜像。")]),a._v(" "),s("li",[a._v("--digests:显示镜像的摘要信息。")]),a._v(" "),s("li",[a._v("-f：显示满足条件的镜像。")]),a._v(" "),s("li",[a._v("--format：指定返回值的模板文件。")]),a._v(" "),s("li",[a._v("--no-trunc：显示完整的镜像信息。")]),a._v(" "),s("li",[a._v("-q：只显示镜像ID。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" images ubuntu //\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker tag：标记本地镜像，将其归入某一仓库。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker rmi：删除本地一个或多个镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" rmi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" IMAGE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("IMAGE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("OPTIONS说明:")]),a._v(" "),s("ul",[s("li",[a._v("-f：强制删除。")]),a._v(" "),s("li",[a._v("--no-prune：不移除该镜像的过程镜像，默认移除。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker build：用于使用Dockerfile创建镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("URL"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" hello .//使用当前目录的dockerfile创建名为hello的镜像。-t表示要创建的目标镜像名。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build github/creack/dicker-firefox //使用url创建镜像。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" ./dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" //通过-f来指定Dockerfile文件的位置\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker history：查看指定镜像的创建历史。")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker save：将指定镜像保存为tar归档文件。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" save "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" IMAGE "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("IMAGE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" save "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" my_ubuntu_v3.tar runoob/ubuntu:v3\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker load：导入使用docker save命令导出的镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" load "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" busybox.tar.gz\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" load "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--input")]),a._v(" fedora.tar\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("docker import：从归档文件中创建镜像。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTIONS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("URL"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("- "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("REPOSITORY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":TAG"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v("  my_ubuntu_v3.tar runoob/ubuntu:v4  \n")])])])])]),a._v(" "),s("h3",{attrs:{id:"_4、docker之dockerfile详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、docker之dockerfile详解"}},[a._v("#")]),a._v(" 4、docker之Dockerfile详解")]),a._v(" "),s("p",[a._v("​\t\tDockfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。"),s("strong",[a._v("Docker程序将读取Dockerfile，根据指令生成定制的image（镜像）。")])]),a._v(" "),s("p",[a._v("**注意：**指令越多，构建的镜像越大，所以尽可能使用"),s("code",[a._v("&&")]),a._v("来将多条指令连接成一条指令。")]),a._v(" "),s("p",[s("strong",[a._v("1、FROM")])]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("FROM")]),a._v("指定一个基础镜像，一般情况下一个可用的Dockerfile一定是FROM为第一条指令。")])]),a._v(" "),s("li",[s("p",[a._v("FROM一定是首个非注释指令Dockerfile。")])]),a._v(" "),s("li",[s("p",[a._v("FROM可以在一个Dockerfile中出现多次，以便于创建混合的images。")])]),a._v(" "),s("li",[s("p",[a._v("如果没有指定tag，latest将会被指定为要使用的基础镜像版本。")])])]),a._v(" "),s("p",[s("strong",[a._v("2、COPY")])]),a._v(" "),s("p",[a._v("​\t\tCOPY 将文件从路径 "),s("code",[a._v("src")]),a._v(" 复制添加到容器内部路径 "),s("code",[a._v("dest")]),a._v("。")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("src")]),a._v("必须是相对源文件夹的一个文件或目录，也可以是一个远程的url。可以使用通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。")]),a._v(" "),s("li",[s("code",[a._v("dest")]),a._v("是目标容器中的绝对路径。该路径不用事先建好，路径不存在的话，会自动创建。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("COPY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("源路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("1")]),a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("目标路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\nCOPY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<源路径1>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".  "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<目标路径>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[s("strong",[a._v("3、CMD")])]),a._v(" "),s("p",[a._v("​\t\tdockerfile中只能有一个"),s("code",[a._v("CMD")]),a._v("指令。如果指定了多个，那么最后的"),s("code",[a._v("CMD")]),a._v("命令才会生效。"),s("code",[a._v("CMD")]),a._v("指令的主要作用是提供默认的执行程序。这些默认值可以包括可执行文件，也可以省略可执行文件。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。当你使用shell或者exec格式时，cmd会自动执行这个命令。")]),a._v(" "),s("p",[a._v("类似于"),s("code",[a._v("RUN")]),a._v("指令。但二者运行的时间点不同。")]),a._v(" "),s("ul",[s("li",[a._v("CMD在docker run时运行。")]),a._v(" "),s("li",[a._v("RUN在docker build时运行。")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("CMD "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("shell 命令"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" \nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<可执行文件或命令>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<param1>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<param2>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" //默认可执行文件是sh\n")])])]),s("p",[s("strong",[a._v("4、RUN")])]),a._v(" "),s("p",[a._v("​\t\t用于执行后面跟着的命令行命令。主要有两种格式。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("shell格式")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("RUN "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("命令行命令"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  //命令行命令等同于终端操作的shell命令\n")])])])]),a._v(" "),s("li",[s("p",[a._v("exec格式")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("RUN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"可执行文件"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"参数1"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"参数2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])])]),a._v(" "),s("p",[s("strong",[a._v("5、ENTRYPOINT")])]),a._v(" "),s("p",[a._v("​\t\t类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("ENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<executeable>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<param1>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<param2>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("​\t\t可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("FROM nginx\nENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"nginx"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 定参")]),a._v("\nCMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/etc/nginx/nginx.conf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 变参 ")]),a._v("\n")])])]),s("p",[a._v("1、假如已经通过Dockerfile("),s("code",[a._v("docker build -t nginx:v1 .")]),a._v(")构建了镜像，此时不传参运行时。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run nginx:v1\n")])])]),s("p",[a._v("容器内会默认运行以下命令，开启主进程。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("nginx "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" /etc/nginx/nginx.conf\n")])])]),s("p",[a._v("2、传参运行")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run  nginx:test "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" /etc/nginx/new.conf\n")])])]),s("p",[s("strong",[a._v("6、ENV")])]),a._v(" "),s("p",[a._v("​\t\t设置环境变量，定义环境变量，在后续的指令中，就可以使用这个环境变量。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("ENV "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[s("strong",[a._v("7、ARG")])]),a._v(" "),s("p",[a._v("​\t\t构建参数，与 ENV 作用一至。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("ARG "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("参数名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("默认值"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[s("strong",[a._v("8、EXPOSE")])]),a._v(" "),s("p",[a._v("​\t\t申明端口。在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。")]),a._v(" "),s("h3",{attrs:{id:"_5、docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、docker-compose"}},[a._v("#")]),a._v(" 5、Docker Compose")]),a._v(" "),s("p",[a._v("​\t\tCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。")]),a._v(" "),s("p",[a._v("Compose使用的三个步骤：")]),a._v(" "),s("ul",[s("li",[a._v("使用 Dockerfile 定义应用程序的环境。")]),a._v(" "),s("li",[a._v("使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。")]),a._v(" "),s("li",[a._v("最后，执行 docker-compose up 命令来启动并运行整个应用程序。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);